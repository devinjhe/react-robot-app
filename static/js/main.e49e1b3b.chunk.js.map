{"version":3,"sources":["components/card/card.component.tsx","components/card-list/card-list.component.tsx","components/search-box/search-box.component.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","type","placeholder","onChange","handleChange","App","state","searchField","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2SAQaA,G,kBAAO,SAACC,GACjB,OACA,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,aCJbC,EAAW,SAACR,GACrB,OACI,qBAAKC,UAAU,YAAf,SAEID,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACzB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCNnBM,G,MAAY,SAACX,GACtB,OACI,uBACIC,UAAU,SACVW,KAAK,SACLC,YAAab,EAAMa,YACnBC,SAAUd,EAAMe,iBCmCbC,E,kDAjCb,WAAYhB,GAAe,IAAD,8BACxB,cAAMA,IAEDiB,MAAQ,CACXR,SAAU,GACVS,YAAa,IALS,E,gEASL,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAE,EAAKC,SAAS,CAACf,SAAUc,S,+BAGhC,IAAD,SAC4BE,KAAKR,MAAhCR,EADD,EACCA,SAAWS,EADZ,EACYA,YACbQ,EAAmBjB,EAASkB,QAAO,SAAAvB,GACvC,OAAOA,EAAQE,KAAKsB,cAAcC,SAASX,EAAYU,kBAEzD,OACE,sBAAK3B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CACEY,YAAY,kBACZE,aAAc,SAAAe,GAAC,OAAI,EAAKN,SAAS,CAACN,YAAaY,EAAEC,OAAOC,WAE1D,cAAC,EAAD,CAAUvB,SAAUiB,W,GA5BVO,aCDHC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e49e1b3b.chunk.js","sourcesContent":["import React from 'react'\nimport './card.styles.css'\nimport { Monster } from '../../interfaces'\n\ntype CardProps = {\n    monster: Monster,\n}\n\nexport const Card = (props: CardProps) => {\n    return (\n    <div className='card-container'>\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\n        <h2>{props.monster.name}</h2>\n        <p>{props.monster.email}</p>\n    </div>\n    )\n}","import React from 'react'\nimport './card-list.styles.css'\nimport { Card } from '../card/card.component'\nimport { Monster } from '../../interfaces'\n\ntype Props = {\n    monsters: Monster[],\n}\n\nexport const CardList = (props: Props) => {\n    return (\n        <div className='card-list'>\n        {\n            props.monsters.map(monster => \n            (<Card key={monster.id} monster={monster} />))\n        }\n        </div>    \n    )\n}","import React from 'react'\nimport './search-box.styles.css'\n\ntype SearchBoxProps = {\n    placeholder: string,\n    handleChange: (e: any) => void,\n}\n\nexport const SearchBox = (props: SearchBoxProps) => {\n    return(\n        <input\n            className=\"search\"\n            type='search'\n            placeholder={props.placeholder}\n            onChange={props.handleChange}\n        />\n    )\n}","import React, {Component} from 'react';\nimport './App.css';\nimport { CardList } from './components/card-list/card-list.component'\nimport { SearchBox } from './components/search-box/search-box.component'\nimport { Monster } from './interfaces'\n\ntype Props = {\n\n}\n\ntype State = {\n  monsters: Monster[]\n  searchField: string,\n}\n\nclass App extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      monsters: [],\n      searchField: \"\",\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users=>this.setState({monsters: users}))\n  }\n\n  render() {\n    const { monsters , searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster => {\n      return monster.name.toLowerCase().includes(searchField.toLowerCase())\n    })\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox\n          placeholder=\"Search Monsters\"\n          handleChange={e => this.setState({searchField: e.target.value})}\n        />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}